import random
import string

import hashlib

import json
from rich.panel import Panel
from rich import box


# Function to generate a random string of letters and digits
def generate_random_string(length=6):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))


# Function to compare two responses using SHA-256 hashing
def compare_two_responses_using_hashing(response_one, response_two):
    # Generate SHA-256 hash for each response
    response_one_hash = hashlib.sha256(response_one.text.encode('utf-8')).hexdigest()
    response_two_hash = hashlib.sha256(response_two.text.encode('utf-8')).hexdigest()

    # Return True if hashes match, otherwise False
    return response_one_hash == response_two_hash


# Function to print formatted messages based on the state
def cprint(self, text, state):
    # Map states to console styles
    state_styles = {
        'success': 'bold green',
        'failure': 'bold red',
        'info': 'bold blue',
        'ack': 'bold yellow'
    }

    # Use the specified style or a custom one based on the state
    style = state_styles.get(state, f'bold {state}')

    # Print the formatted message
    self.console.print(f'\n[{style}][*] {text}[/{style}]')


# Function to highlight JSON-like data in a specific format
def highlight_json(data):
    if isinstance(data, dict):
        # Recursively highlight each key-value pair if it's a dictionary
        return {k: highlight_json(v) for k, v in data.items()}
    elif isinstance(data, list):
        # Recursively highlight each item if it's a list
        return [highlight_json(v) for v in data]
    else:
        # Highlight the value (leaf node) using the specified colors
        return f'[#FFF5E1 on #C80036]{data}[/#FFF5E1 on #C80036]'


# Function to print JSON data, optionally with highlighting
def cprint_json(self, data, highlighted=True):
    # Highlight the JSON data if required
    json_str = json.dumps(highlight_json(data) if highlighted else data, indent=4)

    # Print the JSON string
    self.console.print(f'\n{json_str}')


# Function to print a panel or raw data with a custom style
def cprint_panel(self, mode, data):
    # Decode data for printing
    panel_content = data.decode()

    # If mode is 0, print a styled panel
    if mode == 0:
        panel = Panel(panel_content, style='#EEEEEE on #373A40', box=box.MINIMAL)
        self.console.print('\n', end='')
        self.console.print(panel)
    else:
        # Otherwise, print raw data with a simple style
        self.console.print(f'\n[#EEEEEE on #373A40]{panel_content}[/#EEEEEE on #373A40]')
